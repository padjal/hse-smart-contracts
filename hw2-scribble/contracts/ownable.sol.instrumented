/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity ^0.8.0;

/// #define senderIsOwner() bool = _owner == msg.sender;
contract Ownable {
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    struct vars3 {
        address old_0;
    }

    struct vars4 {
        address old_1;
    }

    struct vars5 {
        bool old_2;
        bool old_3;
    }

    address private _owner;

    ///  @dev Throws if called by any account other than the owner.
    modifier onlyOwner() {
        require(owner() == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /// #if_succeeds {:msg "After construction the owner is not 0"} _owner != address(0);
    constructor() {
        address msgSender = msg.sender;
        Ownable__owner_address_assign(msgSender);
        emit OwnershipTransferred(address(0), msgSender);
        unchecked {
            if (!(_owner != address(0))) {
                emit __ScribbleUtilsLib__106.AssertionFailed("001032:0104:000 2: After construction the owner is not 0");
                assert(false);
            }
        }
    }

    function owner() public returns (address RET_0) {
        RET_0 = _original_Ownable_owner();
        unchecked {
            if (!(RET_0 == _owner)) {
                emit __ScribbleUtilsLib__106.AssertionFailed("001371:0080:000 3: returns owner");
                assert(false);
            }
        }
    }

    function _original_Ownable_owner() private view returns (address) {
        return _owner;
    }

    function renounceOwnership() public {
        vars3 memory _v;
        unchecked {
            _v.old_0 = _owner;
        }
        _original_Ownable_renounceOwnership();
        unchecked {
            if (!(_owner == address(0))) {
                emit __ScribbleUtilsLib__106.AssertionFailed("001871:0087:000 4: Set's the owner to 0");
                assert(false);
            }
            if (!(_v.old_0 == msg.sender)) {
                emit __ScribbleUtilsLib__106.AssertionFailed("002066:0098:000 5: can only be called by the owner");
                assert(false);
            }
        }
    }

    function _original_Ownable_renounceOwnership() private onlyOwner() {
        emit OwnershipTransferred(_owner, address(0));
        Ownable__owner_address_assign(address(0));
    }

    function transferOwnership(address newOwner) public {
        vars4 memory _v;
        unchecked {
            _v.old_1 = _owner;
        }
        _original_Ownable_transferOwnership(newOwner);
        unchecked {
            if (!(_owner != address(0))) {
                emit __ScribbleUtilsLib__106.AssertionFailed("002692:0099:000 6: You can never set the owner to 0");
                assert(false);
            }
            if (!(_v.old_1 == msg.sender)) {
                emit __ScribbleUtilsLib__106.AssertionFailed("002899:0098:000 7: can only be called by the owner");
                assert(false);
            }
        }
    }

    function _original_Ownable_transferOwnership(address newOwner) private {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        Ownable__owner_address_assign(newOwner);
    }

    /// Implementation of user function define senderIsOwner() bool = (_owner == msg.sender)
    function senderIsOwner() internal view returns (bool) {
        unchecked {
            return _owner == msg.sender;
        }
    }

    function Ownable__owner_address_assign(address ARG0) internal returns (address RET0) {
        vars5 memory _v;
        unchecked {
            _v.old_2 = _owner == msg.sender;
            _v.old_3 = _owner == address(0x00);
        }
        _owner = ARG0;
        RET0 = _owner;
        unchecked {
            if (!(_v.old_2 || _v.old_3)) {
                emit __ScribbleUtilsLib__106.AssertionFailed("003925:0106:000 1: Only the owner can update this variable");
                assert(false);
            }
        }
    }
}

library __ScribbleUtilsLib__106 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}