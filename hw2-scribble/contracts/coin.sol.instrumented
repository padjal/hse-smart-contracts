/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
/// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;

contract Coin {
    error InsufficientBalance(uint requested, uint available);

    event Sent(address from, address to, uint amount);

    struct vars0 {
        uint256 old_0;
    }

    address public minter;
    mapping(address => uint) public balances;

    constructor() {
        minter = msg.sender;
    }

    function mint(address receiver, uint amount) public {
        vars0 memory _v;
        unchecked {
            _v.old_0 = balances[receiver];
        }
        _original_Coin_mint(receiver, amount);
        unchecked {
            if (!(balances[receiver] == (_v.old_0 + amount))) {
                emit __ScribbleUtilsLib__97.AssertionFailed("000802:0099:000 0: Balance is successfully increased");
                assert(false);
            }
        }
    }

    function _original_Coin_mint(address receiver, uint amount) private {
        require(msg.sender == minter);
        balances[receiver] += amount;
    }

    function send(address receiver, uint amount) public {
        if (amount > balances[msg.sender]) revert InsufficientBalance({requested: amount, available: balances[msg.sender]});
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit Sent(msg.sender, receiver, amount);
    }
}

library __ScribbleUtilsLib__97 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}